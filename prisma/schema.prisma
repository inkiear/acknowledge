generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reward {
  id              String       @id @default(cuid())
  value           Int
  issueId         String       @unique
  issueIdentifier String       @unique
  targetStateId   String
  attachmentId    String       @unique
  claimed         Boolean      @default(false)
  claimedAt       DateTime?
  claimedBy       Account?     @relation("rewardClaimedBy", fields: [claimedById], references: [id])
  claimedById     String?
  pointLogs       PointLog[]
  createdBy       Account      @relation("rewardCreatedBy", fields: [createdById], references: [id])
  createdById     String
  actions         Action[]
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  updatedAt       DateTime     @updatedAt
  createdAt       DateTime     @default(now())
}

model PointLog {
  id             String       @id @default(cuid())
  account        Account      @relation(fields: [accountId], references: [id])
  accountId      String
  previousPoints Int
  newPoints      Int
  reward         Reward?      @relation(fields: [rewardId], references: [id])
  rewardId       String?      @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
}

model Transaction {
  id             String       @id @default(cuid())
  beneficiary    Account      @relation("transactionBeneficiary", fields: [beneficiaryId], references: [id])
  beneficiaryId  String
  benefactor     Account      @relation("transactionBenefactor", fields: [benefactorId], references: [id])
  benefactorId   String
  value          Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  message        String
  actions        Action[]
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
}

enum ActorType {
  USER
  SYSTEM
}

enum ActionType {
  TRANSACTION
  REWARD_CREATE
  REWARD_UPDATE
  REWARD_DELETE
  REWARD_CLAIM
}

model Action {
  id             String       @id @default(cuid())
  actor          Account?     @relation(fields: [actorId], references: [id])
  actorId        String?
  actorType      ActorType
  metadata       Json
  type           ActionType
  reward         Reward?      @relation(fields: [rewardId], references: [id])
  rewardId       String?
  transaction    Transaction? @relation(fields: [transactionId], references: [id])
  transactionId  String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
}

model Organization {
  id           String        @id @default(cuid())
  linearId     String        @unique
  apiKey       String?
  accounts     Account[]
  rewards      Reward[]
  transactions Transaction[]
  pointLogs    PointLog[]
  actions      Action[]
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  points                    Int           @default(0)
  transactionsAsBeneficiary Transaction[] @relation("transactionBeneficiary")
  transactionsAsBenefactor  Transaction[] @relation("transactionBenefactor")
  pointLogs                 PointLog[]
  organization              Organization  @relation(fields: [organizationId], references: [id])
  organizationId            String
  actions                   Action[]
  rewardsCreated            Reward[]      @relation("rewardCreatedBy")
  rewardsClaimed            Reward[]      @relation("rewardClaimedBy")

  @@unique([provider, providerAccountId])
  @@unique([id, organizationId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
